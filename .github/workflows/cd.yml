name: CD
on:
  push:
    branches:
      - main
      - ci

env:
  SAMPLE_APP_PATH: 'apps/sample-app'
jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      TURBO_CACHE_DIR: .turbo/android
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Setup secrets
        run: |
          bash .github/scripts/env-secrets.sh "${{ secrets.GOOGLE_CLIENT_ID}}" "${{ secrets.MICROSOFT_CLIENT_ID }}" "${{ secrets.MICROSOFT_SIGNATURE_HASH }}" "${{ secrets.DROPBOX_CLIENT_ID }}" "${{ secrets.DROPBOX_CLIENT_SECRET }}"

      - name: Cache turborepo for Android
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-android-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-android-

      - name: Check turborepo cache for Android
        run: |
          TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:android').cache.status")

          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Install JDK
        if: env.turbo_cache_hit != 1
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Finalize Android SDK
        if: env.turbo_cache_hit != 1
        run: |
          /bin/bash -c "yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null"

      - name: Cache Gradle
        if: env.turbo_cache_hit != 1
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('apps/sample-app/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Sample App for Android
        env:
          JAVA_OPTS: '-XX:MaxHeapSize=6g'
        run: |
          yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}"

      - name: Upload .apk artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: ${{ env.SAMPLE_APP_PATH }}/android/app/build/outputs/apk/release/app-release.apk

  build-ios:
    runs-on: macos-14
    env:
      TURBO_CACHE_DIR: .turbo/ios
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Setup secrets
        run: |
          bash .github/scripts/env-secrets.sh "${{ secrets.GOOGLE_CLIENT_ID}}" "${{ secrets.MICROSOFT_CLIENT_ID }}" "${{ secrets.MICROSOFT_SIGNATURE_HASH }}" "${{ secrets.DROPBOX_CLIENT_ID }}" "${{ secrets.DROPBOX_CLIENT_SECRET }}"

      - name: Cache turborepo for iOS
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-ios-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-ios-

      - name: Check turborepo cache for iOS
        run: |
          TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:ios').cache.status")

          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Cache cocoapods
        if: env.turbo_cache_hit != 1
        id: cocoapods-cache
        uses: actions/cache@v4
        with:
          path: |
            **/ios/Pods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('apps/sample-app/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-

      - name: Install cocoapods
        if: env.turbo_cache_hit != 1
        run: |
          cd apps/sample-app/ios
          pod install
        env:
          NO_FLIPPER: 1

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: KEYCHAIN_PASSWORD

        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build Sample App for iOS
        run: |
          yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}"

      - name: Export .ipa
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}

        run: |
          # create variables
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist

          # import profile lists from secrets
          echo -n "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode -o $EXPORT_OPTS_PATH

          # extract .ipa
          xcodebuild -exportArchive -archivePath ${{ env.SAMPLE_APP_PATH }}/ios/build/RNStorageSample.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Upload .ipa
        uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: ${{ runner.temp }}/build/RNStorageSample.ipa

  deploy-android-and-ios:
    runs-on: ubuntu-latest
    needs:
      - build-android
      - build-ios
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download .apk & .ipa files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Upload .apk to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: ${{ secrets.APP_CENTER_ANDROID_APP_NAME }}
          group: Testers
          token: ${{ secrets.APP_CENTER_TOKEN }}
          file: app-release.apk
          notifyTesters: true
          debug: true
          gitReleaseNotes: true

      - name: Upload .ipa to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: ${{ secrets.APP_CENTER_IOS_APP_NAME }}
          group: Testers
          token: ${{ secrets.APP_CENTER_TOKEN }}
          file: RNStorageSample.ipa
          notifyTesters: true
          debug: true
          gitReleaseNotes: true

  # TODO: Uncomment when ready to publish
  # check-packages-version:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     package_version: ${{ steps.check_version.outputs.package_version }}
  #     version_changed: ${{ steps.check_version.outputs.version_changed }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Check packages version
  #       id: check_version
  #       run: |
  #         .github/scripts/check-packages-version.sh

  # publish-packages:
  #   runs-on: ubuntu-latest
  #   needs: check-packages-version
  #   if: needs.check-packages-version.outputs.version_changed == 'true'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup
  #       uses: ./.github/actions/setup

  #     - name: Build packages
  #       run: yarn prepare

  #     - name: Setup NPM token
  #       run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
  #       env:
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  #     - name: Publish packages to NPM
  #       run: |
  #         yarn lerna publish from-package --no-changelog --yes

  # create-release:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-android
  #     - build-ios
  #     - check-packages-version
  #   if: needs.check-packages-version.outputs.version_changed == 'true'
  #   env:
  #     TAG_NAME: v${{ needs.check-packages-version.outputs.package_version }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup git user
  #       run: |
  #         git config user.name "${{ github.actor }}"
  #         git config user.email "openmobilehub@users.noreply.github.com"

  #     - name: Create new tag
  #       run: |
  #         git tag ${{ env.TAG_NAME }}
  #         git push origin ${{ env.TAG_NAME }}

  #     - name: Download .apk & .ipa files
  #       uses: actions/download-artifact@v4
  #       with:
  #         merge-multiple: true

  #     - name: Rename .apk & .ipa files
  #       run: |
  #         mv app-release.apk sample-app.apk
  #         mv RNStorageSample.ipa sample-app.ipa

  #     - name: Create GitHub release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ env.TAG_NAME }}
  #         files: |
  #           sample-app.apk
  #           sample-app.ipa
